<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="a34338a25d4a" name="pytest" skipped="0" tests="13" time="1.356" timestamp="2020-12-16T04:04:40.096277"><testcase classname="test_config" file="test_config.py" line="43" name="test_DPManageConfigObject_schema" time="0.004"></testcase><testcase classname="test_actionqueue" file="test_actionqueue.py" line="12" name="test_DPActionQueue" time="0.003"></testcase><testcase classname="test_config" file="test_config.py" line="54" name="test_DPManageConfigObject_schema_get_prop" time="0.004"></testcase><testcase classname="test_config" file="test_config.py" line="22" name="test_DPManageConfigObject" time="0.004"></testcase><testcase classname="test_requests" file="test_requests.py" line="26" name="test_DPActionQueueRequest_1" time="0.004"></testcase><testcase classname="test_requests" file="test_requests.py" line="44" name="test_DPActionQueueRequest_2" time="0.004"></testcase><testcase classname="test_request_handlers" file="test_request_handlers.py" line="12" name="test_action_process_request" time="0.004"></testcase><testcase classname="test_requests" file="test_requests.py" line="110" name="test_DPManageConfigRequest_min" time="0.004"></testcase><testcase classname="test_requests" file="test_requests.py" line="127" name="test_DPManageConfigRequest_w_name" time="0.004"></testcase><testcase classname="test_requests" file="test_requests.py" line="276" name="test_DPManageConfigRequest_invalid_class" time="0.004"></testcase><testcase classname="test_dp_diff" file="test_dp_diff.py" line="12" name="test_dp_valcred_state" time="0.005"><failure message="def test_dp_valcred_state():
        dp_state_resp =  {
            &quot;CryptoValCred&quot;: {
                &quot;CRLDPHandling&quot;: &quot;ignore&quot;,
                &quot;CertValidationMode&quot;: &quot;legacy&quot;,
                &quot;Certificate&quot;: {
                    &quot;href&quot;: &quot;/mgmt/config/default/CryptoCertificate/Test1&quot;,
                    &quot;value&quot;: &quot;Test1&quot;
                },
                &quot;CheckDates&quot;: &quot;on&quot;,
                &quot;ExplicitPolicy&quot;: &quot;off&quot;,
                &quot;InitialPolicySet&quot;: &quot;2.5.29.32.0&quot;,
                &quot;RequireCRL&quot;: &quot;off&quot;,
                &quot;UseCRL&quot;: &quot;on&quot;,
                &quot;mAdminState&quot;: &quot;enabled&quot;,
                &quot;name&quot;: &quot;valcred&quot;
            },
            &quot;_links&quot;: {
                &quot;doc&quot;: {
                    &quot;href&quot;: &quot;/mgmt/docs/config/CryptoValCred&quot;
                },
                &quot;self&quot;: {
                    &quot;href&quot;: &quot;/mgmt/config/default/CryptoValCred/valcred&quot;
                }
            }
        }
        proposed_valcred = {
            &quot;CryptoValCred&quot;: {
                &quot;name&quot;: &quot;valcred&quot;,
                &quot;mAdminState&quot;: &quot;disabled&quot;
            }
        }
        compared_valcred = {
            &quot;CryptoValCred&quot;: {
                &apos;name&apos;:&apos;valcred&apos;,
                &apos;mAdminState&apos;: {
                    &apos;from&apos;: &apos;enabled&apos;,
                    &apos;to&apos;:&apos;disabled&apos;
                }
            }
        }
    
        assert dp_diff.matching_prim_keys(dp_state_resp, proposed_valcred)
        dup_keys = dp_diff.get_duplicate_keys(dp_state_resp[&apos;CryptoValCred&apos;], proposed_valcred[&apos;CryptoValCred&apos;])
        assert dup_keys == {&apos;name&apos;, &apos;mAdminState&apos;}
    
    
        diff_keys = dp_diff.get_diff_keys(dp_state_resp[&apos;CryptoValCred&apos;], proposed_valcred[&apos;CryptoValCred&apos;])
&gt;       assert diff_keys == {&apos;mAdminState&apos;}
E       AssertionError

tests/unit/module_utils/datapower/test_dp_diff.py:61: AssertionError">def test_dp_valcred_state():
        dp_state_resp =  {
            &quot;CryptoValCred&quot;: {
                &quot;CRLDPHandling&quot;: &quot;ignore&quot;,
                &quot;CertValidationMode&quot;: &quot;legacy&quot;,
                &quot;Certificate&quot;: {
                    &quot;href&quot;: &quot;/mgmt/config/default/CryptoCertificate/Test1&quot;,
                    &quot;value&quot;: &quot;Test1&quot;
                },
                &quot;CheckDates&quot;: &quot;on&quot;,
                &quot;ExplicitPolicy&quot;: &quot;off&quot;,
                &quot;InitialPolicySet&quot;: &quot;2.5.29.32.0&quot;,
                &quot;RequireCRL&quot;: &quot;off&quot;,
                &quot;UseCRL&quot;: &quot;on&quot;,
                &quot;mAdminState&quot;: &quot;enabled&quot;,
                &quot;name&quot;: &quot;valcred&quot;
            },
            &quot;_links&quot;: {
                &quot;doc&quot;: {
                    &quot;href&quot;: &quot;/mgmt/docs/config/CryptoValCred&quot;
                },
                &quot;self&quot;: {
                    &quot;href&quot;: &quot;/mgmt/config/default/CryptoValCred/valcred&quot;
                }
            }
        }
        proposed_valcred = {
            &quot;CryptoValCred&quot;: {
                &quot;name&quot;: &quot;valcred&quot;,
                &quot;mAdminState&quot;: &quot;disabled&quot;
            }
        }
        compared_valcred = {
            &quot;CryptoValCred&quot;: {
                &apos;name&apos;:&apos;valcred&apos;,
                &apos;mAdminState&apos;: {
                    &apos;from&apos;: &apos;enabled&apos;,
                    &apos;to&apos;:&apos;disabled&apos;
                }
            }
        }
    
        assert dp_diff.matching_prim_keys(dp_state_resp, proposed_valcred)
        dup_keys = dp_diff.get_duplicate_keys(dp_state_resp[&apos;CryptoValCred&apos;], proposed_valcred[&apos;CryptoValCred&apos;])
        assert dup_keys == {&apos;name&apos;, &apos;mAdminState&apos;}
    
    
        diff_keys = dp_diff.get_diff_keys(dp_state_resp[&apos;CryptoValCred&apos;], proposed_valcred[&apos;CryptoValCred&apos;])
&gt;       assert diff_keys == {&apos;mAdminState&apos;}
E       AssertionError

tests/unit/module_utils/datapower/test_dp_diff.py:61: AssertionError</failure></testcase><testcase classname="test_requests" file="test_requests.py" line="292" name="test_DPGetConfigRequest_1" time="0.005"></testcase><testcase classname="test_requests" file="test_requests.py" line="86" name="test_DPManageConfigRequest_mod_args" time="0.004"></testcase></testsuite></testsuites>